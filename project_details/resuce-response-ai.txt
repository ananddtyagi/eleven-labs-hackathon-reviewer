<div>
<h2>Inspiration</h2>
<p>The inspiration for Rescue-Response-AI stemmed from the urgent need to improve emergency healthcare response times and accuracy. Witnessing the challenges faced by medical professionals in triaging patients quickly, especially during high-pressure situations, sparked the idea to leverage AI and automation. We aimed to create a tool that bridges the gap between incoming patient data and actionable emergency responses, reducing delays and potentially saving lives.</p>
<hr/>
<h2>What it Does</h2>
<p>Rescue-Response-AI is a FastAPI-based application designed to:</p>
<ul>
<li><strong>Capture Medical Data</strong>: Receives patient data (e.g., symptoms, location, contact info) via a webhook from various sources.</li>
<li><strong>Analyze Emergencies</strong>: Uses an AI model (Grok from xAI) to assess the severity of medical cases, identifying emergencies like heart attacks or severe injuries.</li>
<li><strong>Trigger Notifications</strong>: Integrates with the Bolna API to initiate phone calls to responders for urgent cases, providing critical details instantly.</li>
<li><strong>Store and Display Data</strong>: Saves all cases and notifications in a PostgreSQL database and offers two views: an HTML dashboard for human monitoring and a JSON API for programmatic access.</li>
<li><strong>User Management</strong>: Includes simple signup and login functionality to manage access (currently basic, with plain text passwords for demo purposes).</li>
</ul>
<p>It’s a seamless system that automates emergency detection and response while keeping healthcare providers informed in real time.</p>
<hr/>
<h2>How We Built It</h2>
<ul>
<li><strong>Backend</strong>: Built with FastAPI for its async capabilities and automatic Swagger UI documentation.</li>
<li><strong>Database</strong>: Used SQLAlchemy with PostgreSQL to persistently store user accounts, medical cases, and notification logs.</li>
<li><strong>AI Integration</strong>: Leveraged Grok (via the xAI API) to analyze incoming medical data and classify emergencies based on severity.</li>
<li><strong>Notification System</strong>: Integrated the Bolna API for outbound calls, passing patient details to responders.</li>
<li><strong>Modular Design</strong>: Split the application into routers (<code>auth</code>, <code>webhook</code>, <code>call</code>, <code>display</code>) for maintainability, with shared utilities in <code>database.py</code>, <code>models.py</code>, and <code>schemas.py</code>.</li>
<li><strong>CORS</strong>: Added middleware to enable frontend compatibility.</li>
<li><strong>Deployment</strong>: Hosted on Render, ensuring scalability and accessibility.</li>
</ul>
<hr/>
<h2>Challenges We Ran Into</h2>
<ul>
<li><strong>Database Schema Mismatch</strong>: Encountered issues where the <code>users</code> table had a <code>hashed_password</code> column from an earlier version, while the code expected <code>password</code>. This required manual schema updates or code adjustments.</li>
<li><strong>AI Response Parsing</strong>: Ensuring Grok’s JSON responses were consistent and correctly parsed for emergency classification took some trial and error.</li>
<li><strong>Asynchronous Integration</strong>: Balancing async calls to external APIs (Grok and Bolna) with synchronous database operations posed initial hurdles, requiring careful dependency management.</li>
<li><strong>Plain Text Passwords</strong>: Opting for simplicity in the demo led to security trade-offs, which we had to consciously address in documentation to avoid misuse in production.</li>
<li><strong>Deployment on Render</strong>: Configuring environment variables and debugging logs remotely via Render’s CLI was a learning curve.</li>
</ul>
<hr/>
<h2>Accomplishments That We're Proud Of</h2>
<ul>
<li><strong>Functional AI Triage</strong>: Successfully integrated Grok to accurately classify emergencies, providing a proof-of-concept for AI-driven healthcare.</li>
<li><strong>Real-Time Notifications</strong>: Achieved seamless integration with Bolna for instant call notifications, a critical feature for emergency response.</li>
<li><strong>Dual Display Modes</strong>: Built both an intuitive HTML dashboard and a JSON API endpoint, catering to both human operators and automated systems.</li>
<li><strong>Modular Architecture</strong>: Organized the codebase into reusable modules, making it easy to extend or maintain.</li>
<li><strong>Swagger UI Customization</strong>: Enhanced the API docs with examples and branding, improving usability for testing and demo purposes.</li>
</ul>
<hr/>
<h2>What We Learned</h2>
<ul>
<li><strong>FastAPI’s Power</strong>: Gained deep insights into FastAPI’s async capabilities, dependency injection, and automatic OpenAPI generation.</li>
<li><strong>Database Management</strong>: Learned to handle schema mismatches and the importance of migrations (e.g., Alembic) for production environments.</li>
<li><strong>AI Integration</strong>: Understood how to work with AI APIs like Grok, including prompt engineering and response handling.</li>
<li><strong>Deployment Challenges</strong>: Mastered debugging and logging in a cloud environment like Render, emphasizing the need for robust error handling.</li>
<li><strong>Security Trade-offs</strong>: Realized the risks of plain text passwords and the importance of planning authentication strategies early.</li>
</ul>
<hr/>
<h2>What's Next for Rescue-Response-AI</h2>
<ul>
<li><strong>Enhanced Security</strong>: Implement password hashing (e.g., <code>bcrypt</code>) and JWT-based authentication to secure user access and protect endpoints.</li>
<li><strong>Automated Notifications</strong>: Expand the notification system to auto-trigger calls for emergencies within the webhook flow, reducing manual intervention.</li>
<li><strong>Frontend Development</strong>: Build a dedicated frontend (e.g., with React or Vue.js) to replace the HTML dashboard, offering a more interactive experience.</li>
<li><strong>Database Migrations</strong>: Integrate Alembic for seamless schema updates without manual intervention.</li>
<li><strong>Scalability</strong>: Add load balancing and caching (e.g., Redis) to handle higher volumes of webhook data and calls.</li>
<li><strong>Advanced Analytics</strong>: Incorporate real-time analytics and reporting features to provide insights into emergency trends and response times.</li>
<li><strong>Multi-Channel Alerts</strong>: Extend notifications to include SMS, email, or push notifications alongside phone calls.</li>
</ul>
<hr/>
</div>